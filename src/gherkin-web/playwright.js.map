{"version":3,"sources":["../src/playwright.ts"],"sourcesContent":["interface Locator {\n  click(): Promise<void>;\n  toBeVisible(): Promise<boolean>;\n  toContainText(text: string): Promise<boolean>;\n  fill(value: string): Promise<void>;\n}\n\ninterface PageObject {\n  goto(url: string): Promise<void>;\n  locator(selector: string): Locator;\n  click(selector: string): Promise<void>;\n}\n\ninterface BrowserContext {\n  newPage(): PageObject;\n}\n\ninterface Browser {\n  newContext(): BrowserContext;\n  close(): Promise<void>;\n}\n\ninterface SelectorInfo {\n  element: string;\n  text?: string;\n}\n\n// Parse Playwright-style selectors\nconst parseSelector = (sel: string): SelectorInfo => {\n  const hasTextMatch = sel.match(/^(.+):has-text\\(\"([^\"]+)\"\\)$/);\n  if (hasTextMatch) {\n    const [_, element, text] = hasTextMatch;\n    return { element, text };\n  }\n  return { element: sel };\n};\n\n// Find element with text\nconst findElementWithText = (element: string, text: string): Element | null => {\n  const elements = Array.from(document.querySelectorAll(element));\n  const found = elements.find(el => el.textContent?.includes(text) ?? false);\n  return found || null;\n};\n\n// Browser automation helpers\nconst createPageObject = (): PageObject => ({\n  async goto(url: string): Promise<void> {\n    console.log('page: goto', url, ' -- cannot implement this in browser for now');\n  },\n  \n  locator(selector: string): Locator {\n    const { element, text } = parseSelector(selector);\n    \n    return {\n      async click(): Promise<void> {\n        const el = text ? findElementWithText(element, text) : document.querySelector(element);\n        if (el instanceof HTMLElement) {\n          el.click();\n        }\n      },\n      \n      async toBeVisible(): Promise<boolean> {\n        const el = text ? findElementWithText(element, text) : document.querySelector(element);\n        return el !== null;\n      },\n      \n      async toContainText(expectedText: string): Promise<boolean> {\n        const el = text ? findElementWithText(element, text) : document.querySelector(element);\n        if (el instanceof HTMLInputElement || el instanceof HTMLTextAreaElement) {\n          return el.value.includes(expectedText);\n        }\n        return el?.textContent?.includes(expectedText) ?? false;\n      },\n\n      async fill(value: string): Promise<void> {\n        const el = text ? findElementWithText(element, text) : document.querySelector(element);\n        // https://stackoverflow.com/questions/23892547/what-is-the-best-way-to-trigger-change-or-input-event-in-react-js\n        if (el instanceof HTMLInputElement || el instanceof HTMLTextAreaElement) {\n          const nativeInputValueSetter = Object.getOwnPropertyDescriptor(\n            window.HTMLInputElement.prototype,\n            'value'\n          )?.set;\n          nativeInputValueSetter?.call(el, value);\n          const event = new Event('input', { bubbles: true });\n          el.dispatchEvent(event);\n        }\n      }\n    };\n  },\n  \n  async click(selector: string): Promise<void> {\n    return this.locator(selector).click();\n  }\n});\n\n// Expect helper\nexport const expect = (locator: Locator) => ({\n  async toBeVisible(): Promise<boolean> {\n    return locator.toBeVisible();\n  },\n  \n  async toContainText(text: string): Promise<boolean> {\n    const result = await locator.toContainText(text);\n    if (result) {\n      console.log('expect: toContainText result:', result);\n    } else {\n      console.error('expect: toContainText result:', result);\n    }\n    return result;\n  }\n});\n\nexport const chromium = {\n  launch: (): Browser => ({\n    newContext: (): BrowserContext => ({\n      newPage: () => createPageObject()\n    }),\n    close: async (): Promise<void> => {\n      console.log('ðŸ§¹ Cleaned up browser resources');\n    }\n  })\n}; "],"mappings":";AA4BA,IAAM,gBAAgB,CAAC,QAA8B;AACnD,QAAM,eAAe,IAAI,MAAM,8BAA8B;AAC7D,MAAI,cAAc;AAChB,UAAM,CAAC,GAAG,SAAS,IAAI,IAAI;AAC3B,WAAO,EAAE,SAAS,KAAK;AAAA,EACzB;AACA,SAAO,EAAE,SAAS,IAAI;AACxB;AAGA,IAAM,sBAAsB,CAAC,SAAiB,SAAiC;AAC7E,QAAM,WAAW,MAAM,KAAK,SAAS,iBAAiB,OAAO,CAAC;AAC9D,QAAM,QAAQ,SAAS,KAAK,QAAM,GAAG,aAAa,SAAS,IAAI,KAAK,KAAK;AACzE,SAAO,SAAS;AAClB;AAGA,IAAM,mBAAmB,OAAmB;AAAA,EAC1C,MAAM,KAAK,KAA4B;AACrC,YAAQ,IAAI,cAAc,KAAK,8CAA8C;AAAA,EAC/E;AAAA,EAEA,QAAQ,UAA2B;AACjC,UAAM,EAAE,SAAS,KAAK,IAAI,cAAc,QAAQ;AAEhD,WAAO;AAAA,MACL,MAAM,QAAuB;AAC3B,cAAM,KAAK,OAAO,oBAAoB,SAAS,IAAI,IAAI,SAAS,cAAc,OAAO;AACrF,YAAI,cAAc,aAAa;AAC7B,aAAG,MAAM;AAAA,QACX;AAAA,MACF;AAAA,MAEA,MAAM,cAAgC;AACpC,cAAM,KAAK,OAAO,oBAAoB,SAAS,IAAI,IAAI,SAAS,cAAc,OAAO;AACrF,eAAO,OAAO;AAAA,MAChB;AAAA,MAEA,MAAM,cAAc,cAAwC;AAC1D,cAAM,KAAK,OAAO,oBAAoB,SAAS,IAAI,IAAI,SAAS,cAAc,OAAO;AACrF,YAAI,cAAc,oBAAoB,cAAc,qBAAqB;AACvE,iBAAO,GAAG,MAAM,SAAS,YAAY;AAAA,QACvC;AACA,eAAO,IAAI,aAAa,SAAS,YAAY,KAAK;AAAA,MACpD;AAAA,MAEA,MAAM,KAAK,OAA8B;AACvC,cAAM,KAAK,OAAO,oBAAoB,SAAS,IAAI,IAAI,SAAS,cAAc,OAAO;AAErF,YAAI,cAAc,oBAAoB,cAAc,qBAAqB;AACvE,gBAAM,yBAAyB,OAAO;AAAA,YACpC,OAAO,iBAAiB;AAAA,YACxB;AAAA,UACF,GAAG;AACH,kCAAwB,KAAK,IAAI,KAAK;AACtC,gBAAM,QAAQ,IAAI,MAAM,SAAS,EAAE,SAAS,KAAK,CAAC;AAClD,aAAG,cAAc,KAAK;AAAA,QACxB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,MAAM,UAAiC;AAC3C,WAAO,KAAK,QAAQ,QAAQ,EAAE,MAAM;AAAA,EACtC;AACF;AAGO,IAAM,SAAS,CAAC,aAAsB;AAAA,EAC3C,MAAM,cAAgC;AACpC,WAAO,QAAQ,YAAY;AAAA,EAC7B;AAAA,EAEA,MAAM,cAAc,MAAgC;AAClD,UAAM,SAAS,MAAM,QAAQ,cAAc,IAAI;AAC/C,QAAI,QAAQ;AACV,cAAQ,IAAI,iCAAiC,MAAM;AAAA,IACrD,OAAO;AACL,cAAQ,MAAM,iCAAiC,MAAM;AAAA,IACvD;AACA,WAAO;AAAA,EACT;AACF;AAEO,IAAM,WAAW;AAAA,EACtB,QAAQ,OAAgB;AAAA,IACtB,YAAY,OAAuB;AAAA,MACjC,SAAS,MAAM,iBAAiB;AAAA,IAClC;AAAA,IACA,OAAO,YAA2B;AAChC,cAAQ,IAAI,wCAAiC;AAAA,IAC/C;AAAA,EACF;AACF;","names":[]}